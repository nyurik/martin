name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'demo/**'
      - 'docs/**'
      - 'homebrew-formula/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'demo/**'
      - 'docs/**'
      - 'homebrew-formula/**'
  release:
    types: [ published ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: 'true'
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            build_deb: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - run: |
          mkdir -p target_releases/
          unzip -o build-${{ matrix.target }}.zip -d target_releases/
      - name: Save build artifacts to build-${{ matrix.target }}
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: target_releases/*

  docker:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        # https://github.com/docker/metadata-action
        with:
          images: ghcr.io/maplibre/martin
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        # https://github.com/docker/setup-qemu-action
        with:
          platforms: linux/amd64,linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # https://github.com/docker/setup-buildx-action
        with:
          install: true
          platforms: linux/amd64,linux/arm64

      - run: rm -rf target_releases
      - uses: actions/download-artifact@v3
        with:
          name: build-aarch64-unknown-linux-gnu
          path: target_releases/linux/arm64
      - uses: actions/download-artifact@v3
        with:
          name: build-x86_64-unknown-linux-gnu
          path: target_releases/linux/amd64
      - name: Reset permissions
        run: chmod -R +x target_releases/

      - name: Start postgres
        uses: nyurik/action-setup-postgis@v1
        id: pg
        with:
          username: test
          password: test
          database: test
          rights: --superuser
      - name: Init database
        shell: bash
        run: tests/fixtures/initdb.sh
        env:
          DATABASE_URL: ${{ steps.pg.outputs.connection-uri }}

      - name: Build linux/arm64 Docker image
        id: docker_aarch64-unknown-linux-gnu
        uses: docker/build-push-action@v5
        # https://github.com/docker/build-push-action
        with:
          context: .
          file: multi-platform.Dockerfile
          load: true
          tags: maplibre/martin:linux-arm64
          platforms: linux/arm64
      - name: Test linux/arm64 Docker image
        run: |
          PLATFORM=linux/arm64
          export MBTILES_BUILD=-
          export MBTILES_BIN="docker run --rm --net host --platform $PLATFORM -e DATABASE_URL -v $PWD/tests:/tests --entrypoint /usr/local/bin/mbtiles maplibre/martin:$PLATFORM"
          export MARTIN_BUILD=-
          export MARTIN_BIN="docker run --rm --net host --platform $PLATFORM -e DATABASE_URL -v $PWD/tests:/tests maplibre/martin:$PLATFORM"
          tests/test.sh
        env:
          DATABASE_URL: ${{ steps.pg.outputs.connection-uri }}

      - name: Build linux/amd64 Docker image
        id: docker_x86_64-unknown-linux-gnu
        uses: docker/build-push-action@v5
        # https://github.com/docker/build-push-action
        with:
          context: .
          file: multi-platform.Dockerfile
          load: true
          tags: maplibre/martin:linux-amd64
          platforms: linux/amd64
      - name: Test linux/amd64 Docker image
        run: |
          PLATFORM=linux/amd64
          export MBTILES_BUILD=-
          export MBTILES_BIN="docker run --rm --net host --platform $PLATFORM -e DATABASE_URL -v $PWD/tests:/tests --entrypoint /usr/local/bin/mbtiles maplibre/martin:$PLATFORM"
          export MARTIN_BUILD=-
          export MARTIN_BIN="docker run --rm --net host --platform $PLATFORM -e DATABASE_URL -v $PWD/tests:/tests maplibre/martin:$PLATFORM"
          tests/test.sh
        env:
          DATABASE_URL: ${{ steps.pg.outputs.connection-uri }}

      - name: Login to GitHub Docker registry
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v3
        # https://github.com/docker/login-action
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push the Docker image
        if: ${{ github.actor != 'dependabot[bot]' && github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: multi-platform.Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
